version: '3.8'

services:
  n8n:
    image: n8nio/n8n:1.99.1
    container_name: n8n
    restart: unless-stopped
    ports:
      - '5678:5678'
    environment:
      # Database configuration (using SQLite by default)
      - DB_TYPE=sqlite
      - DB_SQLITE_DATABASE=/home/node/.n8n/database.sqlite

      # Webhook configuration
      - N8N_HOST=localhost
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - WEBHOOK_URL=http://localhost:5678/

      # Security and authentication
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=admin
      - N8N_BASIC_AUTH_PASSWORD=password

      # Execution settings
      - EXECUTIONS_PROCESS=main
      - EXECUTIONS_MODE=regular

      # Logging
      - N8N_LOG_LEVEL=info

      # Timezone
      - GENERIC_TIMEZONE=UTC

      # Optional: Enable telemetry (set to false to disable)
      - N8N_DIAGNOSTICS_ENABLED=false

      # Optional: Custom node directory for your GPortal nodes
      - N8N_CUSTOM_EXTENSIONS=/home/node/.n8n/custom

    volumes:
      # Persistent data storage
      - n8n_data:/home/node/.n8n

      # Mount your custom nodes (optional)
      - ./custom:/home/node/.n8n/custom

    networks:
      - n8n_network

    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:5678/healthz']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Optional: PostgreSQL database (alternative to SQLite)
  # Uncomment if you want to use PostgreSQL instead of SQLite
  # postgres:
  #   image: postgres:15
  #   container_name: n8n-postgres
  #   restart: unless-stopped
  #   environment:
  #     - POSTGRES_DB=n8n
  #     - POSTGRES_USER=n8n
  #     - POSTGRES_PASSWORD=n8n_password
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #   networks:
  #     - n8n_network
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U n8n"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3

  # Optional: Redis for queue management (for production)
  # Uncomment for production use with Redis
  # redis:
  #   image: redis:7-alpine
  #   container_name: n8n-redis
  #   restart: unless-stopped
  #   command: redis-server --appendonly yes
  #   volumes:
  #     - redis_data:/data
  #   networks:
  #     - n8n_network
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "ping"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3

volumes:
  n8n_data:
    driver: local
  # postgres_data:
  #   driver: local
  # redis_data:
  #   driver: local

networks:
  n8n_network:
    driver: bridge
